#!/usr/bin/env python
# coding: utf-8

def remove_delta_table(var_db, var_nome_tabela):
  '''
  Função que deleta tabelas Delta do datalake Azure
  Entrada:
   var_db - nome do schema do datalake. 
   var_nome_tabela - nome da tabela do datalake.
  Retorno:
  rc_code
   |-> 0 - Tabela excluída com sucesso.
   |-> 1 - Tabela não encontrada. Confirme o database e o path informado se estão corretos.
   |-> 2 - Erro Grave! Tentativa de excluir raiz dos arquivos. Corriga o path e tente novamente.
   |-> 9 - Erro inesperado.
  ret_msg - mensagem de retorno de acordo com o rc_code.
  '''
  try:
    db_tabela = var_db + '.' + var_nome_tabela
    if var_path == '/mnt':
      rc_code = 2
    else:
      df_table = spark.sql('''show tables in {db} like "{tabela}" '''.format(db = var_db, tabela = var_nome_tabela))
      v_exist = str(df_table.count())
      if v_exist == '1':
        v_mnt_tb = spark.sql('''desc detail {v_schema_table}.{v_table}'''.format(v_schema_table = v_schema_bronze
                                                                                 ,v_table = v_table)).collect()[0][4]
        v_mnt_tb = v_mnt_tb.replace('dbfs:','')
        spark.sql('DROP TABLE if exists {tabela}'.format(tabela = db_tabela))
        dbutils.fs.rm('{0}'.format(v_mnt_tb),True)        
        rc_code = 0
      else:
        rc_code = 1
  except:
    rc_code = 9
  finally:
    if rc_code == 0:
      ret_msg = 'Tabela excluída ' + db_tabela + ' com sucesso.'
    elif rc_code == 1:
      ret_msg = 'Tabela ' + db_tabela + ' não encontrada. Confirme o database e o path informado se estão corretos.'
    elif rc_code == 2:
      ret_msg = 'Erro Grave! Tentativa de excluir raiz dos arquivos. Corriga o path e tente novamente.'
    else:
      ret_msg = 'Ocorreu um erro inesperado.'
      
    print('# ' + ret_msg)
    return rc_code, ret_msg
print('# Função remove_delta_table() definida.')
print('# Para usar: remove_delta_table(var_db, var_nome_tabela, var_path)')
print('#')
